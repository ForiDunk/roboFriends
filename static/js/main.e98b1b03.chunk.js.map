{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","components/MainPage.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","MainPage","filterRobots","filter","toLowerCase","includes","searchField","onRequestRobots","_this$props","onSearchChange","isPending","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","src_components_MainPage","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e98b1b03.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robot.id} \r\n                            name={robot.name} \r\n                            email={robot.email} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                aria-label='seach robots'\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return <h1 className=\"f1\">RoboFriends</h1>;\r\n    }\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './MainPage.css';\r\n\r\nclass MainPage extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    filterRobots = () => {\r\n        return this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { onSearchChange, isPending } = this.props;\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={this.filterRobots()} />        \r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        \r\n    }\r\n};\r\n\r\nexport default MainPage;\r\n","import { apiCall } from './api/api';\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchFrield = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};","export const apiCall = (link) => fetch(link).then(response => response.json());","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MainPage from '../components/MainPage';\r\n\r\nimport { setSearchFrield, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchFrield(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <MainPage {...this.props} />;\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots ,requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware/*, logger*/));\n\nReactDOM.render( \n        <Provider store={store}>\n            <App />\n        </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}